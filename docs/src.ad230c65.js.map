{"version":3,"sources":["index.js"],"names":["barDataset","songNames","countriesList","countriesName","Countries","slice","sort","barPadding","margin","top","right","bottom","left","w","h","y","d3","scaleBand","range","padding","x","scaleLinear","dataset","init","csv","then","data","slider","initSlider","filtered","filter","d","getDate","initGraph","updateGraph","select","insert","on","country","property","index","indexOf","fileName","document","getElementById","style","visibility","src","selectAll","enter","append","attr","text","toUpperCase","length","svg","updateSVG","fullSongNames","artistNames","remove","call","axisBottom","axisLeft","tickSize","tickFormat","i","parseInt","streams","updateBars","bars","merge","bandwidth","arrayObj","Streams","name","substring","domain","max","sliderTime","date","timeFormat","value","weeks2019","map","Date","months","sliderBottom","min","step","width","tickValues","displayValue","val","gTime"],"mappings":"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","file":"src.ad230c65.js","sourceRoot":"../src","sourcesContent":["\n// globals\nvar countriesList = [\"ca\", \"dk\", \"gr\", \"is\", \"mx\", \"ph\", \"sv\",\n    \"ar\", \"ch\", \"do\", \"gt\", \"it\", \"my\", \"pl\", \"th\",\n    \"at\", \"cl\", \"ec\", \"hk\", \"jp\", \"pt\", \"tr\",\n    \"au\", \"co\", \"hn\", \"nl\", \"py\", \"tw\",\n    \"be\", \"cr\", \"es\", \"hu\", \"no\", \"ro\", \"us\",\n    \"fi\", \"id\", \"nz\", \"se\", \"uy\",\n    \"bo\", \"cz\", \"fr\", \"ie\", \"pa\", \"sg\", \"vn\",\n    \"br\", \"de\", \"gb\", \"il\", \"pe\", \"sk\", \"global\"];\n\nvar countriesName = [\"Canada\", \"Denmark\", \"Greece\", \"Iceland\", \"Mexico\", \"Philippines\", \"El Salvador\",\n    \"Argentina\", \"Switzerland\", \"Dominican Republic\", \"Guatemala\", \"Italy\", \"Malaysia\", \"Poland\", \"Thailand\",\n    \"Austria\", \"Chile\", \"Ecuador\", \"Hong Kong\", \"Japan\", \"Portugal\", \"Turkey\",\n    \"Australia\", \"Columbia\", \"Honduras\", \"Netherlands\", \"Paraguay\", \"Taiwan\",\n    \"Belgium\", \"Costa Rica\", \"Spain\", \"Hungary\", \"Norway\", \"Romania\", \"United States\",\n    \"Finland\", \"Indonesia\", \"New Zealand\", \"Sweden\", \"Uruguay\",\n    \"Bolivia\", \"Czech Republic\", \"France\", \"Ireland\", \"Panama\", \"Singapore\", \"Vietnam\",\n    \"Brazil\", \"Germany\", \"United Kingdom\", \"Israel\", \"Peru\", \"Slovakia\", \"global\"];\nvar Countries = (countriesName).slice(0).sort();\n\nvar barPadding = 1;\nvar margin = {\n    top: 15,\n    right: 25,\n    bottom: 30,\n    left: 10\n};\nvar w = 800 - margin.left - margin.right;\nvar h = 460 - margin.top - margin.bottom;\n\n//set x and y ranges\nvar y = d3.scaleBand()\n.range([h - 10, 0])\n.padding(0.1);\n\nvar x = d3.scaleLinear()\n.range([0, w]);\n\n\nvar dataset = [];\nvar barDataset;\nvar songNames;\n\n\n//--------------------------------// end globals\n\nfunction init() {\n    // load global data\n    d3.csv(\"streamsglobal10.csv\").then(function (data) {\n        slider.initSlider();\n        \n        dataset = data;\n        var filtered = data.filter(function (d) {\n            return d[\"date\"] === slider.getDate();\n        })\n        \n        initGraph();\n        updateGraph(filtered);\n\n        // update graph based on country dropdown\n        var countryDropdown = d3.select(\"#vis-container-country\")\n            .insert(\"select\", \"svg\")\n            .on(\"change\", function () {\n                var country = d3.select(this).property(\"value\");\n                var index = countriesName.indexOf(country);\n                var fileName = \"streams\" + countriesList[index] + \"10.csv\";\n\n                if(countriesList[index] == \"global\") {\n                    document.getElementById(\"flag\").style.visibility=\"hidden\"; \n                }\n                else {\n                    document.getElementById(\"flag\").src=(countriesList[index] + \".svg\");\n                    document.getElementById(\"flag\").style.visibility=\"visible\"; \n                }\n\n                // load new csv, and update graph\n                d3.csv(fileName).then(function (data) {\n                    dataset = data;\n                    var filtered = data.filter(function (d) {\n                        return d[\"date\"] === slider.getDate();\n                    })\n                    updateGraph(filtered);\n                });\n            });\n\n        // populate the country dropdown\n        countryDropdown.selectAll(\"option\")\n            .data(Countries)\n            .enter().append(\"option\")\n            .attr(\"value\", function (d) { return d; })\n            .attr(\"selected\", function (d) {\n                return d === \"Global\";\n            })\n            .text(function (d) {\n                return d[0].toUpperCase() + d.slice(1, d.length); // capitalize 1st letter\n            });\n    });\n}\n\nfunction initGraph() {\n    svg = d3.select(\"div#graph\")\n        .append(\"svg\")\n        .attr(\"width\", w + margin.left + margin.right)\n        .attr(\"height\", h + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n}\n\nfunction updateSVG(fullSongNames, barDataset, artistNames, songNames) {\n    svg.selectAll(\"text\").remove();\n\n    // update and add the x Axis\n    svg.selectAll(\"g\").remove();\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + (h - 10) + \")\")\n        .attr(\"color\", \"white\")\n        .call(d3.axisBottom(x));\n\n    // add axis label\n    svg.append(\"text\")\n        .attr(\"transform\",\n            \"translate(\" + (w / 2) + \" ,\" +\n            (h + margin.top + 10) + \")\")\n        .attr(\"fill\", \"white\")\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"12px\")\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Streams\");\n\n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y).tickSize(0).tickFormat(\"\"));\n\n    svg.selectAll(\"title\").remove();\n    svg.selectAll(\"rect\")\n        .append(\"title\")\n        .text(function (d) {\n            var i = 10 - parseInt(d[1]);\n            return \"\\\"\" + fullSongNames[i] + \"\\\" by \" + artistNames[i] + \": \"\n                + d[0] + \" streams on \" + slider.getDate();\n        })\n\n    svg.selectAll(\"text.value\")\n        .data(barDataset)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n            return songNames[parseInt(d[1]) - 1];\n        })\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"y\", function (d, i) {\n            return (9 - i) * ((h - 14) / barDataset.length) + 26;\n        })\n        .attr(\"x\", function (d) {\n            var index = d[1];\n            var streams = barDataset[index - 1][0];\n            return x(streams) - 8;\n        })\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", 550)\n        .attr(\"fill\",\"rgb(35, 35, 35)\")\n}\n\nfunction updateBars(barDataset) {\n    var bars = svg.selectAll(\"rect\")\n        .data(barDataset);\n\n    bars.enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"fill\", function () {\n            return \"rgb(30, 215, 96)\";\n        })\n        .merge(bars)\n        .attr(\"x\", function (d) {\n \n            return x(d[1]);\n        })\n        .attr(\"y\", function (d) {\n            return y(d[1]);\n        })\n        .attr(\"width\", function (d) {\n            return x(d[0]);\n        })\n        .attr(\"height\", y.bandwidth());\n}\n\nfunction updateGraph(filtered) {\n    barDataset = [[]];\n    songNames = [\"\"];\n    var fullSongNames = [\"\"];\n    artistNames = [\"\"];\n\n    for (var i = 0; i < filtered.length; i++) {\n        var arrayObj = [parseInt(filtered[i].Streams), (10 - i) + \"\"];\n        var name = filtered[i][\"Track Name\"];\n        fullSongNames[i] = name;\n        if (filtered[i][\"Track Name\"].length > 30) {\n            name = name.substring(0, 31) + \"...\";\n        }\n        songNames[i] = name;\n        artistNames[i] = filtered[i][\"Artist\"];\n        barDataset[i] = arrayObj;\n    }\n\n    // Scale the range of the data in the domains\n    x.domain([0, d3.max(barDataset, function (d) { return d[0]; })])\n    y.domain(d3.range(1, barDataset.length + 1));\n\n    updateBars(barDataset)\n    updateSVG(fullSongNames, barDataset, artistNames, songNames);\n}\n\n\nslider = function () {\n    var sliderTime;\n    var date;\n\n    function playSlider() {\n\n    }\n\n    function getDate() {\n        return d3.timeFormat(\"%Y-%m-%d\")(sliderTime.value());\n    }\n\n    // Code inspired/provided by https://github.com/johnwalley/d3-simple-slider v1.5.4 Copyright 2019 John Walley\n    function initSlider() {\n        var weeks2019 = d3.range(0, 53).map(function (d) {\n            return new Date(2019, 0, 1 + 7 * d);\n        });\n\n        var months = d3.range(0, 12).map(function (d) {\n            return new Date(2019, d, 1);\n        });\n\n        sliderTime = d3\n            .sliderBottom()\n            .min(d3.min(weeks2019))\n            .max(d3.max(weeks2019))\n            .step(12)\n            .width(770 - margin.left - margin.right)\n            .tickValues(months)\n            .tickFormat(d3.timeFormat(\"%b\"))\n            .displayValue(false)\n            .on(\"onchange\", val => {\n                d3.select(\"div#date-display\").text(d3.timeFormat(\"%Y-%m-%d\")(val));\n                date = d3.timeFormat(\"%Y-%m-%d\")(val);\n\n                var filtered = dataset.filter(function (d) {\n                    for (var i = 0; i < dataset.length; i++) {\n                        return d[\"date\"] === date;\n                    }\n                })\n\n                updateGraph(filtered)\n            });\n\n        var gTime = d3\n            .select(\"div#slider\")\n            .append(\"svg\") \n            .attr(\"width\", 900 - margin.left - margin.right)\n            .attr(\"height\", 100 - margin.top - margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(30,10)\");\n\n        gTime.call(sliderTime);\n        gTime.selectAll(\"text\").attr(\"dx\", \"-10px\").attr(\"dy\", \"-16px\");\n\n        // show date at very beginning\n        d3.select(\"div#date-display\").text(d3.timeFormat(\"%Y-%m-%d\")(sliderTime.value()));\n    }\n\n    return {\n        getDate: getDate,\n        initSlider: initSlider\n    }\n\n}();\n\ninit();\n"]}