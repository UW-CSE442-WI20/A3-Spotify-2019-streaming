{"version":3,"sources":["index.js"],"names":["barDataset","songNames","countriesList","countriesName","Countries","slice","sort","barPadding","margin","top","right","bottom","left","w","h","y","d3","scaleBand","range","padding","x","scaleLinear","dataset","init","csv","then","data","slider","initSlider","initGraph","updateGraph","filter","d","getDate","select","insert","on","country","property","index","indexOf","fileName","selectAll","enter","append","attr","text","toUpperCase","length","svg","bandwidth","call","axisBottom","axisLeft","tickSize","tickFormat","updateSVG","fullSongNames","artistNames","remove","i","parseInt","streams","updateBars","bars","merge","filtered","arrayObj","Streams","name","substring","domain","max","sliderTime","date","timeFormat","value","weeks2019","map","Date","sliderBottom","min","step","width","tickValues","displayValue","val","gTime"],"mappings":"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","file":"src.db68483d.js","sourceRoot":"../src","sourcesContent":["\n// globals\nvar countriesList = [\"ca\", \"dk\", \"gr\", \"is\", \"mx\", \"ph\", \"sv\",\n    \"ar\", \"ch\", \"do\", \"gt\", \"it\", \"my\", \"pl\", \"th\",\n    \"at\", \"cl\", \"ec\", \"hk\", \"jp\", \"pt\", \"tr\",\n    \"au\", \"co\", \"hn\", \"nl\", \"py\", \"tw\",\n    \"be\", \"cr\", \"es\", \"hu\", \"no\", \"ro\", \"us\",\n    \"fi\", \"id\", \"nz\", \"se\", \"uy\",\n    \"bo\", \"cz\", \"fr\", \"ie\", \"pa\", \"sg\", \"vn\",\n    \"br\", \"de\", \"gb\", \"il\", \"pe\", \"sk\", \"global\"];\n\nvar countriesName = [\"Canada\", \"Denmark\", \"Greece\", \"Iceland\", \"Mexico\", \"Philippines\", \"El Salvador\",\n    \"Argentina\", \"Switzerland\", \"Dominican Republic\", \"Guatemala\", \"Italy\", \"Malaysia\", \"Poland\", \"Thailand\",\n    \"Austria\", \"Chile\", \"Ecuador\", \"Hong Kong\", \"Japan\", \"Portugal\", \"Turkey\",\n    \"Australia\", \"Columbia\", \"Honduras\", \"Netherlands\", \"Paraguay\", \"Taiwan\",\n    \"Belgium\", \"Costa Rica\", \"Spain\", \"Hungary\", \"Norway\", \"Romania\", \"United States\",\n    \"Finland\", \"Indonesia\", \"New Zealand\", \"Sweden\", \"Uruguay\",\n    \"Bolivia\", \"Czech Republic\", \"France\", \"Ireland\", \"Panama\", \"Singapore\", \"Vietnam\",\n    \"Brazil\", \"Germany\", \"United Kingdom\", \"Israel\", \"Peru\", \"Slovakia\", \"global\"];\nvar Countries = (countriesName).slice(0).sort();\n\nvar barPadding = 1;\nvar margin = {\n    top: 15,\n    right: 25,\n    bottom: 30,\n    left: 10\n};\nvar w = 1200 - margin.left - margin.right;\nvar h = 612 - margin.top - margin.bottom;\n\n//set x and y ranges\nvar y = d3.scaleBand()\n.range([h, 0])\n.padding(0.1);\n\nvar x = d3.scaleLinear()\n.range([0, w]);\n\n\nvar dataset = [];\nvar barDataset;\nvar songNames;\n\n\n//--------------------------------// end globals\n\nfunction init() {\n    // load global data\n    d3.csv(\"streamsglobal10.csv\").then(function (data) {\n        slider.initSlider();\n        initGraph();\n\n        dataset = data;\n        var filtered = data.filter(function (d) {\n            return d[\"date\"] === slider.getDate();\n        })\n        \n        updateGraph(filtered);\n\n        // update graph based on country dropdown\n        var countryDropdown = d3.select(\"#vis-container-country\")\n            .insert(\"select\", \"svg\")\n            .on(\"change\", function () {\n                var country = d3.select(this).property(\"value\");\n                var index = countriesName.indexOf(country);\n                var fileName = \"streams\" + countriesList[index] + \"10.csv\";\n\n                // load new csv, and update graph\n                d3.csv(fileName).then(function (data) {\n                    dataset = data;\n                    var filtered = data.filter(function (d) {\n                        return d[\"date\"] === slider.getDate();\n                    })\n                    updateGraph(filtered);\n                });\n            });\n\n        // populate the country dropdown\n        countryDropdown.selectAll(\"option\")\n            .data(Countries)\n            .enter().append(\"option\")\n            .attr(\"value\", function (d) { return d; })\n            .attr(\"selected\", function (d) {\n                return d === \"Global\";\n            })\n            .text(function (d) {\n                return d[0].toUpperCase() + d.slice(1, d.length); // capitalize 1st letter\n            });\n    });\n}\n\nfunction initGraph() {\n    svg = d3.select(\"div#graph\")\n        .append(\"svg\")\n        .attr(\"width\", w + margin.left + margin.right)\n        .attr(\"height\", h + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var bars = svg.selectAll(\"rect\")\n        .data([[], [], [], [], [], [], [], [], [], []]);\n\n    // create the bars\n    bars.enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"width\", function (d) { return x(d[0]); })\n        .attr(\"y\", function (d) {\n            return y(d[1]);\n        })\n        .attr(\"fill\", function () {\n            return \"rgb(30, 215, 96)\";\n        })\n        .attr(\"height\", y.bandwidth());\n\n    // add the x Axis\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + h + \")\")\n        .attr(\"color\", \"white\")\n        .call(d3.axisBottom(x));\n    // .ticks(10));\n\n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y).tickSize(0).tickFormat(\"\"));\n\n}\n\nfunction updateSVG(fullSongNames, barDataset, artistNames, songNames) {\n    svg.selectAll(\"text\").remove();\n\n    // update and add the x Axis\n    svg.selectAll(\"g\").remove();\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + h + \")\")\n        .attr(\"color\", \"white\")\n        .call(d3.axisBottom(x));\n\n    // add the y Axis\n    svg.append(\"g\")\n        .call(d3.axisLeft(y).tickSize(0).tickFormat(\"\"));\n\n    svg.selectAll(\"title\").remove();\n    svg.selectAll(\"rect\")\n        .append(\"title\")\n        .text(function (d) {\n            var i = 10 - parseInt(d[1]);\n            // NOTE: date is slider date (not dropdown date)\n            return \"\\\"\" + fullSongNames[i] + \"\\\" by \" + artistNames[i] + \": \"\n                + d[0] + \" streams on \" + slider.getDate();\n        })\n\n    svg.selectAll(\"text.value\")\n        .data(barDataset)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n            return songNames[parseInt(d[1]) - 1];\n        })\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"y\", function (d, i) {\n            return (9 - i) * (h / barDataset.length) + 27;\n        })\n        .attr(\"x\", function (d) {\n            var index = d[1];\n            var streams = barDataset[index - 1][0];\n            return x(streams) - 8;\n        })\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"font-size\", \"14px\")\n        .attr(\"font-weight\", 550)\n        .attr(\"fill\", \"black\")\n}\n\nfunction updateBars(barDataset) {\n    var bars = svg.selectAll(\"rect\")\n        .data(barDataset);\n\n    bars.enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"width\", function (d) { return x(d[0]); })\n        .attr(\"y\", function (d) {\n            return y(d[1]);\n        })\n        .attr(\"fill\", function (d) {\n            return \"rgb(0, 0, \" + (d[0] * 10) + \")\";\n        })\n        .attr(\"height\", y.bandwidth())\n        .merge(bars)\t//Update…\n        .attr(\"x\", function (d, i) {\n            return x(d[1]);\n        })\n        .attr(\"y\", function (d) {\n            return y(d[1]);\n        })\n        .attr(\"width\", function (d) { return x(d[0]); })\n        .attr(\"height\", y.bandwidth());\n}\n\n\nfunction updateGraph(filtered) {\n    barDataset = [[]];\n    songNames = [\"\"];\n    var fullSongNames = [\"\"];\n    artistNames = [\"\"];\n\n    for (var i = 0; i < filtered.length; i++) {\n        var arrayObj = [parseInt(filtered[i].Streams), (10 - i) + \"\"];\n        var name = filtered[i][\"Track Name\"];\n        fullSongNames[i] = name;\n        if (filtered[i][\"Track Name\"].length > 30) {\n            name = name.substring(0, 31) + \"...\";\n        }\n        songNames[i] = name;\n        artistNames[i] = filtered[i][\"Artist\"];\n        barDataset[i] = arrayObj;\n    }\n\n    // Scale the range of the data in the domains\n    x.domain([0, d3.max(barDataset, function (d) { return d[0]; })])\n    y.domain(d3.range(1, barDataset.length + 1));\n\n    updateBars(barDataset)\n    updateSVG(fullSongNames, barDataset, artistNames, songNames);\n}\n\n\nslider = function () {\n    var sliderTime;\n    var date;\n\n    function playSlider() {\n\n    }\n\n    function getDate() {\n        return d3.timeFormat(\"%Y-%m-%d\")(sliderTime.value());\n    }\n\n    // Code inspired/provided by https://github.com/johnwalley/d3-simple-slider v1.5.4 Copyright 2019 John Walley\n    function initSlider() {\n        var weeks2019 = d3.range(0, 53).map(function (d) {\n            return new Date(2019, 0, 1 + 7 * d);\n        });\n\n        sliderTime = d3\n            .sliderBottom()\n            .min(d3.min(weeks2019))\n            .max(d3.max(weeks2019))\n            .step(28)\n            .width(1240 - margin.left - margin.right)\n            .tickFormat(d3.timeFormat(\"%m-%d\"))\n            .tickValues(weeks2019)\n            .displayValue(false)\n            .on(\"onchange\", val => {\n                d3.select(\"p#value\").text(d3.timeFormat(\"%Y-%m-%d\")(val));\n                date = d3.timeFormat(\"%Y-%m-%d\")(val);\n\n                var filtered = dataset.filter(function (d) {\n                    for (var i = 0; i < dataset.length; i++) {\n                        return d[\"date\"] === date;\n                    }\n                })\n\n                updateGraph(filtered)\n            });\n\n        var gTime = d3\n            .select(\"div#slider\")\n            .append(\"svg\") \n            .attr(\"width\", 1350 - margin.left - margin.right)\n            .attr(\"height\", 132 - margin.top - margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(30,30)\");\n\n        gTime.call(sliderTime);\n        gTime.selectAll(\"text\").attr(\"dx\", \"-10px\").attr(\"dy\", \"-16px\");\n\n        // show date at very beginning\n        d3.select(\"p#value\").text(d3.timeFormat(\"%Y-%m-%d\")(sliderTime.value()));\n    }\n\n    return {\n        getDate: getDate,\n        initSlider: initSlider\n    }\n\n}();\n\ninit();\n"]}